C51 COMPILER V9.54   OLED                                                                  07/22/2021 19:26:29 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\OLED.obj
COMPILER INVOKED BY: G:\keil_v5cm\C51\BIN\C51.EXE Workspace\Code\OLED.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Workspace;.\Wo
                    -rkspace\Include) DEBUG OBJECTEXTEND PRINT(.\Listings\OLED.lst) TABS(2) OBJECT(.\Objects\OLED.obj)

line level    source

   1          #include "oled.h"
   2          #include "oledfont.h"  
   3          //OLED的显存
   4          //存放格式如下.
   5          //[0]0 1 2 3 ... 127  
   6          //[1]0 1 2 3 ... 127  
   7          //[2]0 1 2 3 ... 127  
   8          //[3]0 1 2 3 ... 127  
   9          //[4]0 1 2 3 ... 127  
  10          //[5]0 1 2 3 ... 127  
  11          //[6]0 1 2 3 ... 127  
  12          //[7]0 1 2 3 ... 127      
  13          
  14          void OLED_GpioInit(void)
  15          {   
  16   1        GPIOX_TypeDef GPIOX;
  17   1        GPIOPINX_TypeDef GPIOPINX;
  18   1        GPIO_InitTypeDef GPIO_Init;
  19   1      
  20   1      //  OLED_SDA,P55,开漏输出,数字信号输入使能,上拉关闭,施密特使能,转换速度一般,驱动电流控制弱
  21   1        GPIOX = P_5;
  22   1        GPIOPINX = PIN5;
  23   1        
  24   1        GPIO_Init.gpio_mode = GPIO_PM_OD;       //----   端口
  25   1        GPIO_Init.gpio_pxpu = GPIO_PU_DISEN;    //----   端口上拉电阻控制寄存器
  26   1        GPIO_Init.gpio_pxncs = GPIO_PNCS_EN;    //----   端口施密特触发控制寄存器
  27   1        GPIO_Init.gpio_pxsr = GPIO_PSR_SMALL;   //----   端口电平转换速度控制寄存器
  28   1        GPIO_Init.gpio_pxdr = GPIO_PDR_SMALL;   //----   端口驱动电流控制寄存器
  29   1        GPIO_Init.gpio_pxie = GPIO_PIE_EN;      //----   端口数字信号输入使能控制寄存器 
  30   1        
  31   1        IoBuild(GPIOX, GPIOPINX,GPIO_Init);
  32   1        
  33   1      //  OLED_SCL,P54,开漏输出,数字信号输入使能,上拉关闭,施密特使能,转换速度一般,驱动电流控制弱
  34   1        GPIOX = P_5;
  35   1        GPIOPINX = PIN4;
  36   1        
  37   1        GPIO_Init.gpio_mode = GPIO_PM_PP;       //----   推挽输出
  38   1        GPIO_Init.gpio_pxpu = GPIO_PU_DISEN;    //----   端口上拉电阻控制寄存器
  39   1        GPIO_Init.gpio_pxncs = GPIO_PNCS_EN;    //----   端口施密特触发控制寄存器
  40   1        GPIO_Init.gpio_pxsr = GPIO_PSR_SMALL;   //----   端口电平转换速度控制寄存器
  41   1        GPIO_Init.gpio_pxdr = GPIO_PDR_SMALL;   //----   端口驱动电流控制寄存器
  42   1        GPIO_Init.gpio_pxie = GPIO_PIE_EN;      //----   端口数字信号输入使能控制寄存器 
  43   1        
  44   1        IoBuild(GPIOX, GPIOPINX,GPIO_Init); 
  45   1        
  46   1        OLED_SCL = 1;
  47   1        OLED_SDA = 1;
  48   1      }
  49          
  50          void delay_ms(unsigned int ms)
  51          {                         
  52   1        unsigned int a;
  53   1        while(ms)
  54   1        {
C51 COMPILER V9.54   OLED                                                                  07/22/2021 19:26:29 PAGE 2   

  55   2          a=1800;
  56   2          while(a--);
  57   2          ms--;
  58   2        }
  59   1        return;
  60   1      }
  61          
  62          //反显函数
  63          void OLED_ColorTurn(u8 i)
  64          {
  65   1        if(i==0)
  66   1          {
  67   2            OLED_WR_Byte(0xA6,OLED_CMD);//正常显示
  68   2          }
  69   1        if(i==1)
  70   1          {
  71   2            OLED_WR_Byte(0xA7,OLED_CMD);//反色显示
  72   2          }
  73   1      }
  74          
  75          //屏幕旋转180度
  76          void OLED_DisplayTurn(u8 i)
  77          {
  78   1        if(i==0)
  79   1          {
  80   2            OLED_WR_Byte(0xC8,OLED_CMD);//正常显示
  81   2            OLED_WR_Byte(0xA1,OLED_CMD);
  82   2          }
  83   1        if(i==1)
  84   1          {
  85   2            OLED_WR_Byte(0xC0,OLED_CMD);//反转显示
  86   2            OLED_WR_Byte(0xA0,OLED_CMD);
  87   2          }
  88   1      }
  89          
  90          
  91          //延时
  92          void IIC_delay(void)
  93          {
  94   1        u8 t=1;
  95   1        while(t--);
  96   1      }
  97          
  98          //起始信号
  99          void I2C_Start(void)
 100          {
 101   1        OLED_SDA_Set();
 102   1        OLED_SCL_Set();
 103   1        IIC_delay();
 104   1        OLED_SDA_Clr();
 105   1        IIC_delay();
 106   1        OLED_SCL_Clr();
 107   1         
 108   1      }
 109          
 110          //结束信号
 111          void I2C_Stop(void)
 112          {
 113   1        OLED_SDA_Clr();
 114   1        OLED_SCL_Set();
 115   1        IIC_delay();
 116   1        OLED_SDA_Set();
C51 COMPILER V9.54   OLED                                                                  07/22/2021 19:26:29 PAGE 3   

 117   1      }
 118          
 119          //等待信号响应
 120          void I2C_WaitAck(void) //测数据信号的电平
 121          {
 122   1        OLED_SDA_Set();
 123   1        IIC_delay();
 124   1        OLED_SCL_Set();
 125   1        IIC_delay();
 126   1        OLED_SCL_Clr();
 127   1        IIC_delay();
 128   1      }
 129          
 130          //写入一个字节
 131          void Send_Byte(u8 dat)
 132          {
 133   1        u8 i;
 134   1        for(i=0;i<8;i++)
 135   1        {
 136   2          OLED_SCL_Clr();//将时钟信号设置为低电平
 137   2          if(dat&0x80)//将dat的8位从最高位依次写入
 138   2          {
 139   3            OLED_SDA_Set();
 140   3          }
 141   2          else
 142   2          {
 143   3            OLED_SDA_Clr();
 144   3          }
 145   2          IIC_delay();
 146   2          OLED_SCL_Set();
 147   2          IIC_delay();
 148   2          OLED_SCL_Clr();
 149   2          dat<<=1;
 150   2        }
 151   1      }
 152          
 153          //发送一个字节
 154          //向SSD1306写入一个字节。
 155          //mode:数据/命令标志 0,表示命令;1,表示数据;
 156          void OLED_WR_Byte(u8 dat,u8 mode)
 157          {
 158   1        I2C_Start();
 159   1        Send_Byte(0x78);
 160   1        I2C_WaitAck();
 161   1        if(mode){Send_Byte(0x40);}
 162   1        else{Send_Byte(0x00);}
 163   1        I2C_WaitAck();
 164   1        Send_Byte(dat);
 165   1        I2C_WaitAck();
 166   1        I2C_Stop();
 167   1      }
 168          
 169          //坐标设置
 170          
 171          void OLED_Set_Pos(u8 x, u8 y) 
 172          {
 173   1        OLED_WR_Byte(0xb0+y,OLED_CMD);
 174   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 175   1        OLED_WR_Byte((x&0x0f),OLED_CMD);
 176   1      }       
 177          //开启OLED显示    
 178          void OLED_Display_On(void)
C51 COMPILER V9.54   OLED                                                                  07/22/2021 19:26:29 PAGE 4   

 179          {
 180   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 181   1        OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 182   1        OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 183   1      }
 184          //关闭OLED显示     
 185          void OLED_Display_Off(void)
 186          {
 187   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 188   1        OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 189   1        OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 190   1      }            
 191          //清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!    
 192          void OLED_Clear(void)  
 193          {  
 194   1        u8 i,n;       
 195   1        for(i=0;i<4;i++)  
 196   1        {  
 197   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 198   2          OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置―列低地址
 199   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 200   2          for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 201   2        } //更新显示
 202   1      }
 203          
 204          //在指定位置显示一个字符,包括部分字符
 205          //x:0~127
 206          //y:0~63         
 207          //sizey:选择字体 6x8  8x16
 208          void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 sizey)
 209          {       
 210   1        u8 c=0,sizex=sizey/2;
 211   1        u16 i=0,size1;
 212   1        if(sizey==8)size1=6;
 213   1        else size1=(sizey/8+((sizey%8)?1:0))*(sizey/2);
 214   1        c=chr-' ';//得到偏移后的值
 215   1        OLED_Set_Pos(x,y);
 216   1        for(i=0;i<size1;i++)
 217   1        {
 218   2          if(i%sizex==0&&sizey!=8) OLED_Set_Pos(x,y++);
 219   2          if(sizey==8) OLED_WR_Byte(asc2_0806[c][i],OLED_DATA);//6X8字号
 220   2          else if(sizey==16) OLED_WR_Byte(asc2_1608[c][i],OLED_DATA);//8x16字号
 221   2      //    else if(sizey==xx) OLED_WR_Byte(asc2_xxxx[c][i],OLED_DATA);//用户添加字号
 222   2          else return;
 223   2        }
 224   1      }
 225          //m^n函数
 226          u32 oled_pow(u8 m,u8 n)
 227          {
 228   1        u32 result=1;  
 229   1        while(n--)result*=m;    
 230   1        return result;
 231   1      }         
 232          //显示数字
 233          //x,y :起点坐标
 234          //num:要显示的数字
 235          //len :数字的位数
 236          //sizey:字体大小      
 237          void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 sizey)
 238          {           
 239   1        u8 t,temp,m=0;
 240   1        u8 enshow=0;
C51 COMPILER V9.54   OLED                                                                  07/22/2021 19:26:29 PAGE 5   

 241   1        if(sizey==8)m=2;
 242   1        for(t=0;t<len;t++)
 243   1        {
 244   2          temp=(num/oled_pow(10,len-t-1))%10;
 245   2          if(enshow==0&&t<(len-1))
 246   2          {
 247   3            if(temp==0)
 248   3            {
 249   4              OLED_ShowChar(x+(sizey/2+m)*t,y,' ',sizey);
 250   4              continue;
 251   4            }else enshow=1;
 252   3          }
 253   2          OLED_ShowChar(x+(sizey/2+m)*t,y,temp+'0',sizey);
 254   2        }
 255   1      }
 256          //显示一个字符号串
 257          void OLED_ShowString(u8 x,u8 y,u8 *chr,u8 sizey)
 258          {
 259   1        u8 j=0;
 260   1        while (chr[j]!='\0')
 261   1        {   
 262   2          OLED_ShowChar(x,y,chr[j++],sizey);
 263   2          if(sizey==8)x+=6;
 264   2          else x+=sizey/2;
 265   2        }
 266   1      }
 267          //显示汉字
 268          void OLED_ShowChinese(u8 x,u8 y,u8 no,u8 sizey)
 269          {
 270   1        u16 i,size1=(sizey/8+((sizey%8)?1:0))*sizey;
 271   1        for(i=0;i<size1;i++)
 272   1        {
 273   2          if(i%sizey==0) OLED_Set_Pos(x,y++);
 274   2          if(sizey==16) OLED_WR_Byte(Hzk[no][i],OLED_DATA);//16x16字号
 275   2      //    else if(sizey==xx) OLED_WR_Byte(xxx[c][i],OLED_DATA);//用户添加字号
 276   2          else return;
 277   2        }       
 278   1      }
 279          
 280          
 281          //显示图片
 282          //x,y显示坐标
 283          //sizex,sizey,图片长宽
 284          //BMP：要显示的图片
 285          void OLED_DrawBMP(u8 x,u8 y,u8 sizex, u8 sizey,u8 BMP[])
 286          {   
 287   1        u16 j=0;
 288   1        u8 i,m;
 289   1        sizey=sizey/8+((sizey%8)?1:0);
 290   1        for(i=0;i<sizey;i++)
 291   1        {
 292   2          OLED_Set_Pos(x,i+y);
 293   2          for(m=0;m<sizex;m++)
 294   2          {      
 295   3            OLED_WR_Byte(BMP[j++],OLED_DATA);       
 296   3          }
 297   2        }
 298   1      } 
 299          
 300          
 301          
 302          //初始化            
C51 COMPILER V9.54   OLED                                                                  07/22/2021 19:26:29 PAGE 6   

 303          void OLED_Init(void)
 304          {
 305   1      //  OLED_RES_Clr();
 306   1      //  delay_ms(200);
 307   1      //  OLED_RES_Set();
 308   1        OLED_GpioInit();  //io口初始化
 309   1        
 310   1        OLED_WR_Byte(0xAE,OLED_CMD); /*display off*/
 311   1        OLED_WR_Byte(0x00,OLED_CMD); /*set lower column address*/ 
 312   1        OLED_WR_Byte(0x10,OLED_CMD); /*set higher column address*/
 313   1        OLED_WR_Byte(0x00,OLED_CMD); /*set display start line*/ 
 314   1        OLED_WR_Byte(0xB0,OLED_CMD); /*set page address*/ 
 315   1        OLED_WR_Byte(0x81,OLED_CMD); /*contract control*/ 
 316   1        OLED_WR_Byte(0xff,OLED_CMD); /*128*/ 
 317   1        OLED_WR_Byte(0xA1,OLED_CMD); /*set segment remap*/ 
 318   1        OLED_WR_Byte(0xA6,OLED_CMD); /*normal / reverse*/ 
 319   1        OLED_WR_Byte(0xA8,OLED_CMD); /*multiplex ratio*/ 
 320   1        OLED_WR_Byte(0x1F,OLED_CMD); /*duty = 1/32*/ 
 321   1        OLED_WR_Byte(0xC8,OLED_CMD); /*Com scan direction*/ 
 322   1        OLED_WR_Byte(0xD3,OLED_CMD); /*set display offset*/ 
 323   1        OLED_WR_Byte(0x00,OLED_CMD); 
 324   1        OLED_WR_Byte(0xD5,OLED_CMD); /*set osc division*/ 
 325   1        OLED_WR_Byte(0x80,OLED_CMD); 
 326   1        OLED_WR_Byte(0xD9,OLED_CMD); /*set pre-charge period*/ 
 327   1        OLED_WR_Byte(0x1f,OLED_CMD); 
 328   1        OLED_WR_Byte(0xDA,OLED_CMD); /*set COM pins*/ 
 329   1        OLED_WR_Byte(0x00,OLED_CMD); 
 330   1        OLED_WR_Byte(0xdb,OLED_CMD); /*set vcomh*/ 
 331   1        OLED_WR_Byte(0x40,OLED_CMD); 
 332   1        OLED_WR_Byte(0x8d,OLED_CMD); /*set charge pump enable*/ 
 333   1        OLED_WR_Byte(0x14,OLED_CMD);
 334   1        OLED_Clear();
 335   1        OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 336   1      }
 337          
 338          
 339          
 340          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1269    ----
   CONSTANT SIZE    =   2296    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      56
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
